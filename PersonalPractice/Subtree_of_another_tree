//Solution for Leetcode Problem Subtree of another tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//determine if 2 trees are equal
    bool isEqual(TreeNode* s, TreeNode* t) {
	//determine 3 basic cases, both null, one null, values differ
        if (s == NULL && t == NULL) {
            return true;
        }
        else if (s == NULL || t == NULL) {
            return false;
        }
        else if (s->val != t->val) {
            return false;
        }
		//redo search to the left and right sides of both trees, eventually either they're false or true.
        return isEqual(s->left, t->left) && isEqual(s->right, t->right);
    }
    bool isSubtree(TreeNode* s, TreeNode* t) {
	//basic case for s, we're traversing only the big tree s
        if (s == NULL) {
            return false;
        }
		//check if the 2 trees are the same (if s is given to be the same as t this will stop here)
        if (!isEqual(s, t)) {
		//if s is not equal to t we'll assume that s is larger than t and will split the search to it's left node and right node.
            return isSubtree(s->left, t) || isSubtree(s->right, t);    
        }
        return true;
    }
};
