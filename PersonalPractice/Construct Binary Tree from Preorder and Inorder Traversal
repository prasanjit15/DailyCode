/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int len;
    TreeNode* buildTree(vector<int> preorder, vector<int> inorder) {
        return helper(preorder , inorder , 0 , inorder.size()-1);
    }
    
    int pi = 0;
    TreeNode* helper(vector<int>& preorder , vector<int>& inorder , int left , int right)
    {
        if ( left > right) {
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[pi]);
        int inIndex = 0;
        for (int i = left; i <= right; i++) {
            if (inorder[i] == root->val) {
            inIndex = i;
            }
        }
        pi++;
        root->left = helper(preorder , inorder , left , inIndex - 1);
        root->right = helper(preorder , inorder , inIndex+1 , right);
        return root;
    }
        
};
