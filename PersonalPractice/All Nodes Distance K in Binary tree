/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
vector<int> ans;

void addNodes(TreeNode *root, TreeNode *target, int k) {
    if(!root) {
        return;
    }
    if(k == 0) {

        ans.push_back(root->val);
        return;
    }

    addNodes(root->left, target, k-1);
    addNodes(root->right, target, k-1);
}

int findTarget(TreeNode *root, TreeNode *target, int k) {
    if(!root) {

        return -1;
    }
    if(root == target) {

        addNodes(root->left, target, k-1);
        addNodes(root->right, target, k-1);

        return k-1;
    }

    int l = findTarget(root->left, target, k);
    if(l >= 0) {

        if(l == 0) {
            ans.push_back(root->val);
            return -1;
        }
 
        addNodes(root->right, target, l-1); 
        return l-1;
    }

    int r = findTarget(root->right, target, k);
    if(r >= 0) {
 
        if(r == 0) {
            ans.push_back(root->val);
            return -1;
        }
         addNodes(root->left, target, r-1);
      \
        return r-1;
    }
    
    return -1;
}

vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
    if(K == 0) {
        return {target->val}; //As the return is in vector format so this is also acceptable
    }
    ans.clear();
    findTarget(root, target, K);
    return ans;
}
};
