#C++ Inbuilt Functions:

1. stoi --> converts strings to integers.
2. to_string --> converts to string.
3. next_permutation --> finds the next permutation.
4. (char)(ASCII Code) --> converts ASCII to char.
5. istringstream -->     (similar to python's "split" function)
------------------------------------------------------------------------------------------------------------------------------------
how to use it: 
refer problem ---> "Simplify Path" in +--'daily code/personal practice'--+ repo
------------------------------------------------------------------------------------------------------------------------------------
6. string_name.substr(i, k) ---> where i os the looping variable and k is the length of the substring required. "substr" is used to generate all the substring starting from a certain point with a definite length.
7. getline(cin, str) ----> getline() function is used to accept strings with a space in between them, str is the string where the input is stored.
8.





***************************************************************************************************************************
#Coding basics
1. To check if negative ans will be there in case of divsion or multiplication we can use XOR function and XOR both the numbers i.e., [if((A<0) ^ (B<0)) return result = -result]
2. [ a - 'a'] to bring the ASCII of a to 0 similarly replace a (not 'a') with other letters to get their ASCII from 0. Similarly add 'a' to bring back the actual ACII code. 
3. To check the size of a 2d matrix "xl" :
  for getting total size  ----> xl.size();
  for getting only the columns size or the number of columns  -----> xl[0].size();
4. For maximum linked list problem try the two pointer method, let one pointer be slow and another one be fast -----> so keep one as slow->next so as it will proceed one node at a time while other one as fast->next->next so as it will skip the next node to move to its next.
5. 

****************************************************************************************************************************
#Questions to be practised once again
1. NEXT PERMUTATION
2.


