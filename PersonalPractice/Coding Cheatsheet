#C++ Inbuilt Functions:

1. stoi --> converts strings to integers.
2. to_string --> converts to string.
3. next_permutation --> finds the next permutation.
4. (char)(ASCII Code) --> converts ASCII to char.
5. istringstream -->     (similar to python's "split" function)
------------------------------------------------------------------------------------------------------------------------------------
how to use it: 
refer problem ---> "Simplify Path" in +--'daily code/personal practice'--+ repo
------------------------------------------------------------------------------------------------------------------------------------
6. string_name.substr(i, k) ---> where i os the looping variable and k is the length of the substring required. "substr" is used to generate all the substring starting from a certain point with a definite length.
7. getline(cin, str) ----> getline() function is used to accept strings with a space in between them, str is the string where the input is stored.
8. memset(name_of_array_or_string, Value_to_be_put_in_all_places, sizeof(name_of_string_or_array)) --> This helps to initialize an array with desired values. 
   Note:- for int arrays can only be initialised with 0 or -1 using this. char arrays can be initialised with any char, etc...
9. str_name.erase(remove(str_name.begin(), str_name.end(), 'A'), str_name.end()); --> remove 'A' from string
10. vector_name.resise(size, value) ---> changes the vector to a certain size and puts the value in all of its place
11. return {target->val}; ---> When the return type is vector and u want to return a intor anything else, simply enclose it with {}
12. when there is any kind of path mentioned in a tree problem go for DFS
13. iswspace() ---> read use in google, but is used to check if white spaces are present in a string
14. 
 




***************************************************************************************************************************
#Coding basics
1. To check if negative ans will be there in case of divsion or multiplication we can use XOR function and XOR both the numbers i.e., [if((A<0) ^ (B<0)) return result = -result]
2. [ a - 'a']/[a - '0'] to bring the ASCII of a to 0 similarly replace a (not 'a') with other letters to get their ASCII from 0. Similarly add 'a' to bring back the actual ACII code. 
3. To check the size of a 2d matrix "xl" :
  for getting total size  ----> xl.size();
  for getting only the columns size or the number of columns  -----> xl[0].size();
4. For maximum linked list problem try the two pointer method, let one pointer be slow and another one be fast -----> so keep one as slow->next so as it will proceed one node at a time while other one as fast->next->next so as it will skip the next node to move to its next.
5. in a 2d vector (a.size() = number of rows) and (a[0].size() = number of columns)
6. // Declaration of a matrix with 3 rows and 4 columns   -->   vector< vector<int> > my_matrix(3,vector<int>(4));
7. heaps are used where there is anything to find largest or smallest
8. For most of the Vector problems use Recursion, BFS and DFS
9. For all duplicate finding question in stack array etc... use unordered_map
10. Map provides auto sorting
11. Set doesn't store duplicates
12. For duplicates within the range of an array or linked list use the method of two pointers i.e., one slow and other one fast;
13.

****************************************************************************************************************************
#Questions to be practised once again
1. NEXT PERMUTATION
2. LRU Cache
3. WORD DICT
4.


