#include <bits/stdc++.h>

using namespace std;
struct Job{
    char id;
    int deadline;
    int profit;
};

struct DisjointSet{
    int *parent;

    //constructor
    DisjointSet(int n){
        parent = new int[n+1];

        for(int i = 0; i<=n; i++){
            parent[i] = i;        }
    }

    //Find Operation
    int find(int s){
        if(s == parent[s])
            return s;
        
        return parent[s] = find(parent[s]);
    }

    //Union Operation
    void unify(int u, int v){
        parent[v] = u;
    }
};

bool cmp(Job a, Job b){
    return (a.profit > b.profit);
}

int findmax(Job arr[], int n){
    int ans = INT_MIN;
    for(int i = 0; i<n; i++){
        ans = max(ans, arr[i].deadline);
    }
    return ans;
}

void printjob(Job arr[], int n){
    sort(arr, arr+n, cmp);

    int size = findmax(arr, n);

    DisjointSet ds(size);

    for(int i = 0; i<n; i++){
        int available = ds.find(arr[i].deadline);
        if(available > 0){
            ds.unify(ds.find(available - 1), available);
            cout<<arr[i].id<<" ";
        }
    }
    cout<<endl;
}

int main(){
    Job arr[] = {{'a', 2, 100}, {'b', 1, 19}, {'c', 2, 27}, {'d', 1, 25}, {'e', 3, 15}};
    int n = sizeof(arr)/ sizeof(arr[0]);

    cout<<"Following jobs need to be executed for maximum profit: "<<endl;
    printjob(arr, n);
    return 0;
}
