//For a given number of rows print pascal's triangle

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>r(numRows);
        
        for(int i = 0; i<numRows; i++){
            r[i].resize(i+1);
            r[i][0] = r[i][i] = 1;
            for(int j = 1; j<i; j++){
                r[i][j] = r[i-1][j-1] + r[i-1][j];
            }
        }
        return r;
    }
};


//For a given number of row and column find the value in that place

#include<bits/stdc++.h>

using namespace std;

int fact(int n); 
  
int nCr(int n, int r) 
{ 
    return fact(n) / (fact(r) * fact(n - r)); 
} 
  
int fact(int n) 
{ 
    int res = 1; 
    for (int i = 2; i <= n; i++) 
        res = res * i; 
    return res; 
} 

int main() 
{ 
    int r, c;
    cout<<"Enter the row and column number whose pascal triangle value u want to know: ";
    cin>>r>>c;

    cout<<"The value at that position = "<<nCr(r-1, c-1)<<endl;
    return 0; 
} 

//For a given number of row find the value in that place
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> res(rowIndex+1, 0);
        res[0] = 1;
        
        for(int i = 0; i<rowIndex+1; i++){
            for(int j = i; j >= 1; j--){
                res[j] = res[j] + res[j-1];
            }
        }
        return res;
    }
};



